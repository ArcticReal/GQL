import {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLInt,
  GraphQLFloat,
  GraphQLString,
  GraphQLBoolean,
  GraphQLList,
} from 'graphql';

const WorkEffortInputType = new GraphQLInputObjectType({
  name: 'WorkEffortInputType',
  description: 'input type for WorkEffort',

  fields: () => ({
    accommodationMapId: {type: GraphQLString},
    accommodationSpotId: {type: GraphQLString},
    actualCompletionDate: {type: GraphQLString},
    actualMilliSeconds: {type: GraphQLFloat},
    actualSetupMillis: {type: GraphQLFloat},
    actualStartDate: {type: GraphQLString},
    createdByUserLogin: {type: GraphQLString},
    createdDate: {type: GraphQLString},
    currentStatusId: {type: GraphQLString},
    description: {type: GraphQLString},
    estimateCalcMethod: {type: GraphQLString},
    estimatedCompletionDate: {type: GraphQLString},
    estimatedMilliSeconds: {type: GraphQLFloat},
    estimatedSetupMillis: {type: GraphQLFloat},
    estimatedStartDate: {type: GraphQLString},
    facilityId: {type: GraphQLString},
    fixedAssetId: {type: GraphQLString},
    infoUrl: {type: GraphQLString},
    lastModifiedByUserLogin: {type: GraphQLString},
    lastModifiedDate: {type: GraphQLString},
    lastStatusUpdate: {type: GraphQLString},
    locationDesc: {type: GraphQLString},
    moneyUomId: {type: GraphQLString},
    noteId: {type: GraphQLString},
    percentComplete: {type: GraphQLInt},
    priority: {type: GraphQLInt},
    quantityProduced: {type: GraphQLFloat},
    quantityRejected: {type: GraphQLFloat},
    quantityToProduce: {type: GraphQLFloat},
    recurrenceInfoId: {type: GraphQLString},
    reserv2ndPPPerc: {type: GraphQLFloat},
    reservNthPPPerc: {type: GraphQLFloat},
    reservPersons: {type: GraphQLFloat},
    revisionNumber: {type: GraphQLInt},
    runtimeDataId: {type: GraphQLString},
    scopeEnumId: {type: GraphQLString},
    sendNotificationEmail: {type: GraphQLBoolean},
    serviceLoaderName: {type: GraphQLString},
    showAsEnumId: {type: GraphQLString},
    sourceReferenceId: {type: GraphQLString},
    specialTerms: {type: GraphQLString},
    tempExprId: {type: GraphQLString},
    timeTransparency: {type: GraphQLInt},
    totalMilliSecondsAllowed: {type: GraphQLFloat},
    totalMoneyAllowed: {type: GraphQLFloat},
    universalId: {type: GraphQLString},
    workEffortId: {type: GraphQLString},
    workEffortName: {type: GraphQLString},
    workEffortParentId: {type: GraphQLString},
    workEffortPurposeTypeId: {type: GraphQLString},
    workEffortTypeId: {type: GraphQLString}
  })
});

export {WorkEffortInputType};
    